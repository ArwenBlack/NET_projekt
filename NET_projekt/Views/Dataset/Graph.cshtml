@model NET_projekt.Models.GraphModel
@{
    ViewBag.Title = "Graph";
}

<!DOCTYPE HTML>
<html>
<head>
    <script>
        var freq = @Convert.ToString(Model.Dataset.DatasetHzFrequency);
        var l = "@Html.Raw(Model.Dataset.DatasetColumnsInfo)";
        var time = "@Html.Raw(Model.Time)";
        l = l.split(" ");
        for (var i = 0; i < l.length; i++) {
            l[i] = l[i].split(":");
            l[i][1] = l[i][1].split(",");
        }
        var typeList = new Array(l.length);
        for (var i = 0; i < typeList.length; i++) {
            typeList[i] = l[i][0];
        }
        var l2 = new Array();
        for (var i = 0; i < l.length; i++) {
            l2.push(l[i][1]);
        }
        var newlist = prepCols(l2);
        function prepCols(lst) {
            //prepare empty list
            var lst2 = new Array(lst.length);
            for (var i = 0; i < lst2.length; i++) {
                lst2[i] = new Array(lst[i].length)
                for (var j = 0; j < lst2[i].length; j++) {
                    lst2[i][j] = { name: typeList[i] + " sensor " + (j + 1), type: "line", showInLegend: true, dataPoints: [] };
                }
            }
            //fill list
            var splitedLines = @Html.Raw(ViewBag.DataLines);
            for (var executedColumns = 0; executedColumns < splitedLines.length; executedColumns++) {
                var s = splitedLines[executedColumns].split(",");
                //document.write("<br>" + splitedLines[executedColumns] + "</br>");
                for (var i = 0; i < lst.length; i++) {
                    for (var j = 0; j < lst[i].length; j++) {
                        lst2[i][j]['dataPoints'].push({ x: (parseInt(time) + executedColumns/freq), y: parseFloat(s[lst[i][j]]) });
                    }
                }
            }
            return lst2;
        }

        window.onload = function () {
            var charts = new Array(typeList.length);
            for (var i = 0; i < typeList.length; i++) {
                charts[i] = new CanvasJS.Chart("chart" + String(i),
                    {
                        animationEnabled: true,
                        title: {
                            text: "Wykres dla danych " + typeList[i]
                        },
                        axisX: {
                            title: "Czas [s]",
                            interval: 1,
                            suffix: "s"
                        },
                        axisY: {
                            title: "Aplituda Sygnału [mV]"
                        },
                        legend: {
                            cursor: "pointer",
                            fontSize: 16,
                            itemclick: toggleDataSeries
                        },
                        toolTip: {
                            shared: true
                        },
                        data: newlist[i]
                    });
            }
            for (var i = 0; i < charts.length; i++) {
                charts[i].render();
            }
        }

        function toggleDataSeries(e) {
            if (typeof (e.dataSeries.visible) === "undefined" || e.dataSeries.visible) {
                e.dataSeries.visible = false;
            }
            else {
                e.dataSeries.visible = true;
            }
            e.chart.render();
        }
    </script>
</head>
<body>
    <script>
        for (var i = 0; i < typeList.length; i++) {
            var x = "<div id=chart" + i + " style=\"height: 370px; width: 100 %;\"></div>";
            document.write(x);
        }
    </script>
    <script src="https://canvasjs.com/assets/script/canvasjs.min.js"></script>

    <div style="margin-top:20px;">
        <div class=" text-center">
            <input type="button" class="btn btn-dark" value="Poprzednie dane" onclick="location.href='@Url.Action("Graph", "Dataset", new { Id = Model.Dataset.Id, time = Model.Time - 30, previousData=true })'" />
            <input type="button" class="btn btn-dark" value="Następne dane" onclick="location.href='@Url.Action("Graph", "Dataset", new { Id = Model.Dataset.Id, time = Model.Time + 30 })'" />
        </div>
    </div>
    <div style="margin-top:10px;">
        <div class=" text-center">
            @using (Html.BeginForm("Graph", "Dataset", FormMethod.Get))
            {
                <input type="submit" class="btn btn-dark" value="Skocz do sekundy" />
                @Html.TextBoxFor(m => m.Time)
            }
        </div>
    </div>
    <div style="margin-top:10px;">
        <div class=" text-center">
            <input type="button" class="btn btn-dark" value="Wróć" onclick="location.href='@Url.Action("Index", "User")'" />
        </div>
    </div>
</body>
</html>
